[{"name": "app.py", "content": "from pathlib import Path\n\nimport cufflinks as cf\nimport pandas as pd\nimport yfinance as yf\nfrom faicons import icon_svg\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\nfrom shiny.ui import output_ui\nfrom shinywidgets import render_plotly\nfrom stocks import stocks\nimport plotly.graph_objs as go\n\n# Default to the last 6 months\nend = pd.Timestamp.now()\nstart = end - pd.Timedelta(weeks=26)\n\n\nui.page_opts(title=\"Stock explorer\", fillable=True)\n\nwith ui.sidebar():\n    ui.input_selectize(\"ticker\", \"Select Stocks\", choices=stocks, selected=\"AAPL\")\n    ui.input_date_range(\"dates\", \"Select dates\", start=start, end=end)\n\n\nwith ui.layout_column_wrap(fill=False):\n    with ui.value_box(showcase=icon_svg(\"dollar-sign\")):\n        \"Current Price\"\n\n        @render.ui\n        def price():\n            close = get_data()[\"Close\"]\n            return f\"{close.iloc[-1]:.2f}\"\n\n    with ui.value_box(showcase=output_ui(\"change_icon\")):\n        \"Change\"\n\n        @render.ui\n        def change():\n            return f\"${get_change():.2f}\"\n\n    with ui.value_box(showcase=icon_svg(\"percent\")):\n        \"Percent Change\"\n\n        @render.ui\n        def change_percent():\n            return f\"{get_change_percent():.2f}%\"\n    \n\n\nwith ui.layout_columns(col_widths=[9, 3]):\n    with ui.card(full_screen=True):\n        ui.card_header(\"Price history\")\n\n        # Define a new function to generate the histogram plot\n        @render_plotly\n        def histogram_plot():\n            data = get_data()\n            return go.Figure(go.Histogram(x=data['Close'], nbinsx=20))\n\n\n        @render_plotly\n        def price_history():\n            qf = cf.QuantFig(\n                get_data(),\n                name=input.ticker(),\n                up_color=\"#44bb70\",\n                down_color=\"#040548\",\n                legend=\"top\",\n            )\n            qf.add_sma()\n            qf.add_volume(up_color=\"#44bb70\", down_color=\"#040548\")\n            fig = qf.figure()\n            fig.update_layout(\n                hovermode=\"x unified\",\n                paper_bgcolor=\"rgba(0,0,0,0)\",\n                plot_bgcolor=\"rgba(0,0,0,0)\",\n            )\n            return fig\n\n    with ui.card():\n        ui.card_header(\"Latest data\")\n\n        @render.data_frame\n        def latest_data():\n            x = get_data()[:1].T.reset_index()\n            x.columns = [\"Category\", \"Value\"]\n            x[\"Value\"] = x[\"Value\"].apply(lambda v: f\"{v:.1f}\")\n            return x\n\n\nui.include_css(Path(__file__).parent / \"styles.css\")\n\n\n@reactive.calc\ndef get_ticker():\n    return yf.Ticker(input.ticker())\n\n\n@reactive.calc\ndef get_data():\n    dates = input.dates()\n    return get_ticker().history(start=dates[0], end=dates[1])\n\n\n@reactive.calc\ndef get_change():\n    close = get_data()[\"Close\"]\n    return close.iloc[-1] - close.iloc[-2]\n\n\n@reactive.calc\ndef get_change_percent():\n    close = get_data()[\"Close\"]\n    change = close.iloc[-1] - close.iloc[-2]\n    return change / close.iloc[-2] * 100\n\n\nwith ui.hold():\n\n    @render.ui\n    def change_icon():\n        change = get_change()\n        icon = icon_svg(\"arrow-up\" if change >= 0 else \"arrow-down\")\n        icon.add_class(f\"text-{('success' if change >= 0 else 'danger')}\")\n        return icon", "type": "text"}, {"name": "README.md", "content": "# cintel-06-custom\n\n## Overview\nadd summary\n\n\n\n\n\n## Create Project Virtual Environment\n\n```shell\n\npy -m venv .venv\n.venv\\Scripts\\Activate\npy -m pip install -r requirements.txt\n\n```\n3. Requirements\n- Install packages \n```console\npy -m pip install jupyterlab pandas matplotlib \n```\n- Freeze your requirements to requirements.txt. \n```console\npy -m pip install requests\npy -m pip freeze > requirements.txt\n```\n\n\n\n\n## Git add and commit \n\n```shell\ngit add .\ngit commit -m \"add .gitignore, readme, and requirements\"\ngit push origin main\n```\n\n\nOpen a terminal (VS Code menu \"View\" / \"Terminal\") in the root project folder and run these commands.\n\n```shell\nshiny run --reload --launch-browser dashboard/app.py\n```\n\nOpen a browser to <http://127.0.0.1:8000/> and test the app.\n\n## Run Locally - Subsequent Starts\n\nOpen a terminal (VS Code menu \"View\" / \"Terminal\") in the root project folder and run these commands.\n\n```shell\n.venv\\Scripts\\Activate\nshiny run --reload --launch-browser dashboard/app.py\n```\n\n## After Making Changes, Export to Docs Folder\n\nExport to docs folder and test GitHub Pages locally.\n\nOpen a terminal (VS Code menu \"Terminal\" / \"New Terminal\") in the root project folder and run these commands.\n\n```shell\n.venv\\Scripts\\Activate\nshiny static-assets remove\nshinylive export dashboard docs\npy -m http.server --directory docs --bind localhost 8008\n```\n\nOpen a browser to <http://[::1]:8008/> and test the Pages app.\n\n## Push Changes back to GitHub\n\nOpen a terminal (VS Code menu \"Terminal\" / \"New Terminal\") in the root project folder and run these commands.\n\n```shell\ngit add .\ngit commit -m \"Useful commit message\"\ngit push -u origin main\n```\n\nAdd new stuff for app:\nuse dowjones data from csv file \nadd new chart from plotly: https://shiny.posit.co/py/components/outputs/plot-plotly/ \n\nadd data grid: https://shiny.posit.co/py/api/express/express.render.DataGrid.html\n\ndelete out old chart\\ keep other inputs\n", "type": "text"}, {"name": "requirements.txt", "content": "\u00ff\u00fep\u0000l\u0000o\u0000t\u0000l\u0000y\u0000\n\u0000\n\u0000y\u0000f\u0000i\u0000n\u0000a\u0000n\u0000c\u0000e\u0000 \u0000\n\u0000\n\u0000p\u0000a\u0000n\u0000d\u0000a\u0000s\u0000\n\u0000\n\u0000s\u0000h\u0000i\u0000n\u0000y\u0000\n\u0000\n\u0000s\u0000h\u0000i\u0000n\u0000y\u0000w\u0000i\u0000d\u0000g\u0000e\u0000t\u0000s\u0000\n\u0000\n\u0000f\u0000a\u0000i\u0000c\u0000o\u0000n\u0000s\u0000\n\u0000\n\u0000c\u0000u\u0000f\u0000f\u0000l\u0000i\u0000n\u0000k\u0000s\u0000\n\u0000\n\u0000s\u0000h\u0000i\u0000n\u0000y\u0000.\u0000e\u0000x\u0000p\u0000r\u0000e\u0000s\u0000s\u0000\n\u0000\n\u0000s\u0000h\u0000i\u0000n\u0000y\u0000.\u0000u\u0000i\u0000", "type": "text"}, {"name": "stocks.py", "content": "stocks = {\n    \"AAPL\": \"Apple Inc.\",\n    \"MSFT\": \"Microsoft Corporation\",\n    \"AMZN\": \"Amazon.com, Inc.\",\n    \"GOOGL\": \"Alphabet Inc.\",\n    \"META\": \"Meta Platforms\",\n    \"BRK-A\": \"Berkshire Hathaway Inc.\",\n    \"V\": \"Visa Inc.\",\n    \"JNJ\": \"Johnson & Johnson\",\n    \"WMT\": \"Walmart Inc.\",\n    \"JPM\": \"JPMorgan Chase & Co.\",\n    \"MA\": \"Mastercard Incorporated\",\n    \"PG\": \"The Procter & Gamble Company\",\n    \"UNH\": \"UnitedHealth Group Incorporated\",\n    \"DIS\": \"The Walt Disney Company\",\n    \"HD\": \"The Home Depot, Inc.\",\n    \"BAC\": \"Bank of America Corporation\",\n    \"NVDA\": \"NVIDIA Corporation\",\n    \"PYPL\": \"PayPal Holdings, Inc.\",\n    \"CMCSA\": \"Comcast Corporation\",\n    \"NFLX\": \"Netflix, Inc.\",\n    \"ADBE\": \"Adobe Inc.\",\n    \"KO\": \"The Coca-Cola Company\",\n    \"NKE\": \"NIKE, Inc.\",\n    \"MRK\": \"Merck & Co., Inc.\",\n    \"PEP\": \"PepsiCo, Inc.\",\n    \"T\": \"AT&T Inc.\",\n    \"PFE\": \"Pfizer Inc.\",\n    \"INTC\": \"Intel Corporation\",\n    \"CSCO\": \"Cisco Systems, Inc.\",\n    \"CRM\": \"salesforce.com, inc.\",\n    \"XOM\": \"Exxon Mobil Corporation\",\n}", "type": "text"}, {"name": "styles.css", "content": ":root {\n    --bslib-sidebar-main-bg: #f8f8f8;\n  }\n  \n  .plotly .modebar-container {\n    display: none !important;\n  }", "type": "text"}]